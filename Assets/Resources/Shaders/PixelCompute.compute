#pragma kernel CSMain

// Texture references
Texture2D<float4> InputTexture;
RWTexture2D<float4> OutputTexture;

// Pixel shader configuration
cbuffer Configuration
{
    int targetHeight;
};

cbuffer TextureInfo
{
    int textureWidth;
    int textureHeight;
};

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int downscaleAmount = textureHeight / targetHeight;
    // Calculate the corresponding pixel in the input texture
    int downscale = max(1, downscaleAmount);

    int inputX = (id.x / downscale) * downscale;
    int inputY = (id.y / downscale) * downscale;

    // Make sure we don't sample outside the input texture bounds

    // Load the color from the input texture at the calculated coordinates
    float4 color = InputTexture[int2(inputX, inputY)];

    // Write this color to the output texture at the current pixel
    OutputTexture[id.xy] = color;
}
